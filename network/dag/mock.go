// Code generated by MockGen. DO NOT EDIT.
// Source: network/dag/dag.go

// Package dag is a generated GoMock package.
package dag

import (
	gomock "github.com/golang/mock/gomock"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
	reflect "reflect"
)

// MockDAG is a mock of DAG interface
type MockDAG struct {
	ctrl     *gomock.Controller
	recorder *MockDAGMockRecorder
}

// MockDAGMockRecorder is the mock recorder for MockDAG
type MockDAGMockRecorder struct {
	mock *MockDAG
}

// NewMockDAG creates a new mock instance
func NewMockDAG(ctrl *gomock.Controller) *MockDAG {
	mock := &MockDAG{ctrl: ctrl}
	mock.recorder = &MockDAGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDAG) EXPECT() *MockDAGMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockDAG) Subscribe(documentType string, receiver Receiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", documentType, receiver)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockDAGMockRecorder) Subscribe(documentType, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDAG)(nil).Subscribe), documentType, receiver)
}

// Add mocks base method
func (m *MockDAG) Add(documents ...Document) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range documents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockDAGMockRecorder) Add(documents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDAG)(nil).Add), documents...)
}

// MissingDocuments mocks base method
func (m *MockDAG) MissingDocuments() []hash.SHA256Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MissingDocuments")
	ret0, _ := ret[0].([]hash.SHA256Hash)
	return ret0
}

// MissingDocuments indicates an expected call of MissingDocuments
func (mr *MockDAGMockRecorder) MissingDocuments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissingDocuments", reflect.TypeOf((*MockDAG)(nil).MissingDocuments))
}

// Walk mocks base method
func (m *MockDAG) Walk(walker Walker, visitor Visitor, startAt hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", walker, visitor, startAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockDAGMockRecorder) Walk(walker, visitor, startAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockDAG)(nil).Walk), walker, visitor, startAt)
}

// Root mocks base method
func (m *MockDAG) Root() (hash.SHA256Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(hash.SHA256Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Root indicates an expected call of Root
func (mr *MockDAGMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockDAG)(nil).Root))
}

// Get mocks base method
func (m *MockDAG) Get(ref hash.SHA256Hash) (Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ref)
	ret0, _ := ret[0].(Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDAGMockRecorder) Get(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDAG)(nil).Get), ref)
}

// GetByPayloadHash mocks base method
func (m *MockDAG) GetByPayloadHash(payloadHash hash.SHA256Hash) ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPayloadHash", payloadHash)
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPayloadHash indicates an expected call of GetByPayloadHash
func (mr *MockDAGMockRecorder) GetByPayloadHash(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPayloadHash", reflect.TypeOf((*MockDAG)(nil).GetByPayloadHash), payloadHash)
}

// All mocks base method
func (m *MockDAG) All() ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockDAGMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDAG)(nil).All))
}

// IsPresent mocks base method
func (m *MockDAG) IsPresent(ref hash.SHA256Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", ref)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPresent indicates an expected call of IsPresent
func (mr *MockDAGMockRecorder) IsPresent(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockDAG)(nil).IsPresent), ref)
}

// Heads mocks base method
func (m *MockDAG) Heads() []hash.SHA256Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heads")
	ret0, _ := ret[0].([]hash.SHA256Hash)
	return ret0
}

// Heads indicates an expected call of Heads
func (mr *MockDAGMockRecorder) Heads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heads", reflect.TypeOf((*MockDAG)(nil).Heads))
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockPublisher) Subscribe(documentType string, receiver Receiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", documentType, receiver)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPublisherMockRecorder) Subscribe(documentType, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublisher)(nil).Subscribe), documentType, receiver)
}

// MockWalker is a mock of Walker interface
type MockWalker struct {
	ctrl     *gomock.Controller
	recorder *MockWalkerMockRecorder
}

// MockWalkerMockRecorder is the mock recorder for MockWalker
type MockWalkerMockRecorder struct {
	mock *MockWalker
}

// NewMockWalker creates a new mock instance
func NewMockWalker(ctrl *gomock.Controller) *MockWalker {
	mock := &MockWalker{ctrl: ctrl}
	mock.recorder = &MockWalkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalker) EXPECT() *MockWalkerMockRecorder {
	return m.recorder
}

// walk mocks base method
func (m *MockWalker) walk(visitor Visitor, startAt hash.SHA256Hash, getFn func(hash.SHA256Hash) (Document, error), nextsFn func(hash.SHA256Hash) ([]hash.SHA256Hash, error), numberOfNodes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "walk", visitor, startAt, getFn, nextsFn, numberOfNodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// walk indicates an expected call of walk
func (mr *MockWalkerMockRecorder) walk(visitor, startAt, getFn, nextsFn, numberOfNodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "walk", reflect.TypeOf((*MockWalker)(nil).walk), visitor, startAt, getFn, nextsFn, numberOfNodes)
}

// MockPayloadStore is a mock of PayloadStore interface
type MockPayloadStore struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadStoreMockRecorder
}

// MockPayloadStoreMockRecorder is the mock recorder for MockPayloadStore
type MockPayloadStoreMockRecorder struct {
	mock *MockPayloadStore
}

// NewMockPayloadStore creates a new mock instance
func NewMockPayloadStore(ctrl *gomock.Controller) *MockPayloadStore {
	mock := &MockPayloadStore{ctrl: ctrl}
	mock.recorder = &MockPayloadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayloadStore) EXPECT() *MockPayloadStoreMockRecorder {
	return m.recorder
}

// IsPayloadPresent mocks base method
func (m *MockPayloadStore) IsPayloadPresent(payloadHash hash.SHA256Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPayloadPresent", payloadHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPayloadPresent indicates an expected call of IsPayloadPresent
func (mr *MockPayloadStoreMockRecorder) IsPayloadPresent(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPayloadPresent", reflect.TypeOf((*MockPayloadStore)(nil).IsPayloadPresent), payloadHash)
}

// ReadPayload mocks base method
func (m *MockPayloadStore) ReadPayload(payloadHash hash.SHA256Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPayload", payloadHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPayload indicates an expected call of ReadPayload
func (mr *MockPayloadStoreMockRecorder) ReadPayload(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPayload", reflect.TypeOf((*MockPayloadStore)(nil).ReadPayload), payloadHash)
}

// WritePayload mocks base method
func (m *MockPayloadStore) WritePayload(payloadHash hash.SHA256Hash, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePayload", payloadHash, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePayload indicates an expected call of WritePayload
func (mr *MockPayloadStoreMockRecorder) WritePayload(payloadHash, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePayload", reflect.TypeOf((*MockPayloadStore)(nil).WritePayload), payloadHash, data)
}
