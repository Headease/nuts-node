// Code generated by MockGen. DO NOT EDIT.
// Source: crl/db.go

// Package crl is a generated GoMock package.
package crl

import (
	tls "crypto/tls"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockDB) Configure(config *tls.Config, maxValidityDays int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", config, maxValidityDays)
}

// Configure indicates an expected call of Configure.
func (mr *MockDBMockRecorder) Configure(config, maxValidityDays interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDB)(nil).Configure), config, maxValidityDays)
}

// IsRevoked mocks base method.
func (m *MockDB) IsRevoked(issuer string, serialNumber *big.Int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRevoked", issuer, serialNumber)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRevoked indicates an expected call of IsRevoked.
func (mr *MockDBMockRecorder) IsRevoked(issuer, serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRevoked", reflect.TypeOf((*MockDB)(nil).IsRevoked), issuer, serialNumber)
}

// IsValid mocks base method.
func (m *MockDB) IsValid(maxOffsetDays int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid", maxOffsetDays)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockDBMockRecorder) IsValid(maxOffsetDays interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockDB)(nil).IsValid), maxOffsetDays)
}

// Sync mocks base method.
func (m *MockDB) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockDBMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDB)(nil).Sync))
}
